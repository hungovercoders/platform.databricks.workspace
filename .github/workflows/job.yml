name: Terraform Job

on:
  workflow_call:
    inputs:
      UNIQUE_NAMESPACE:
        required: true
        type: string
      ORGANISATION:
        required: true
        type: string
      ARM_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
    secrets:
      ARM_CLIENT_ID:
          required: true
      ARM_CLIENT_SECRET:
          required: true
      ARM_SUBSCRIPTION_ID:
          required: true
      ARM_TENANT_ID:
          required: true

jobs:

    terraform:
        name: 'Terraform'
        runs-on: ubuntu-latest
        environment:  ${{ inputs.ENVIRONMENT }}
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            TF_BACKEND_RESOURCE_GROUP: state-rg-${{ inputs.UNIQUE_NAMESPACE }}
            TF_BACKEND_STORAGE_ACCOUNT: statesa${{ inputs.UNIQUE_NAMESPACE }}
            TF_BACKEND_CONTAINER: ${{ inputs.ENVIRONMENT }}
            ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
            TF_VAR_environment: ${{ inputs.ENVIRONMENT }}
            TF_VAR_unique_namespace: ${{ inputs.UNIQUE_NAMESPACE }}
            TF_VAR_organisation: ${{ inputs.ORGANISATION }}
            TF_VAR_region: ${{ inputs.ARM_REGION }}
        
        steps:
        - name: Checkout
          uses: actions/checkout@v2
    
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.6.3

        - name: Adjust ENVIRONMENT variable for Production Plan
          run: |
            echo "TF_BACKEND_CONTAINER=$(echo '${{ inputs.ENVIRONMENT }}' | sed 's/-plan//')" >> $GITHUB_ENV
            echo "TF_VAR_environment=$(echo '${{ inputs.ENVIRONMENT }}' | sed 's/-plan//')" >> $GITHUB_ENV
            echo "ENVIRONMENT=$(echo '${{ inputs.ENVIRONMENT }}' | sed 's/-plan//')" >> $GITHUB_ENV
    
        - name: 'Show Variables'
          run: |
            echo "Unique Namespace is $TF_VAR_unique_namespace" 
            echo "Organisation is $TF_VAR_organisation" 
            echo "Region is $TF_VAR_region" 
            echo "Storage Account is $TF_BACKEND_STORAGE_ACCOUNT" 
            echo "Environment is $ENVIRONMENT" 
            echo "Container is $TF_BACKEND_CONTAINER"
    
        - name: 'Terraform Format'
          working-directory: terraform
          run: terraform fmt -check
    
        - name: 'Terraform Init'
          working-directory: terraform
          run: terraform init -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP" -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=$TF_BACKEND_CONTAINER"
        
        - name: 'Terraform Validate'
          working-directory: terraform
          run: terraform validate
    
        - name: 'Terraform Plan'
          working-directory: terraform    
          run: |
            set -a
            . ../domain.env
            set +a
            export TF_VAR_team=$TEAM
            export TF_VAR_domain=$DOMAIN
            echo "Team is $TF_VAR_team" 
            echo "Domain is $TF_VAR_domain"
            terraform plan
        
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' || ${{ inputs.ENVIRONMENT }} not in ('production','production-plan')
          working-directory: terraform
          run: |
            set -a
            . ../domain.env
            set +a
            export TF_VAR_team=$TEAM
            export TF_VAR_domain=$DOMAIN
            echo "Team is $TF_VAR_team" 
            echo "Domain is $TF_VAR_domain"
            terraform apply -auto-approve